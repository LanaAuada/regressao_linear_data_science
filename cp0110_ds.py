# -*- coding: utf-8 -*-
"""cp0110_ds.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pT8XvgO0Q--4qmnkH8OCbJjK8nOc_XmX

Check-point - Data Science
- Lana Giulia Auada Leite - rm551143

<h2> Importação dos Módulos
"""

#Importação de bibliotecas necessárias
import numpy  as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
import statsmodels.api as sm
from scipy import stats

"""<h2> Carregando e Processando os Dados"""

#Carregar o dataset
arquivo_csv = "insurance.csv"
data_frame = pd.read_csv(arquivo_csv)

#Processamento de variáveis categóricas
label_encoder = LabelEncoder()

for coluna in data_frame.select_dtypes(include='object').columns:
    if coluna != 'region':
        label_encoder.fit(data_frame[coluna])
        data_frame[coluna] = label_encoder.transform(data_frame[coluna])
    else:
        #One-hot encoding para 'region'
        one_hot_encoder = OneHotEncoder(sparse_output=False)
        colunas_codificadas = one_hot_encoder.fit_transform(data_frame.loc[:, coluna:coluna])
        df_colunas_transformadas = pd.DataFrame(colunas_codificadas,
                                                columns=one_hot_encoder.get_feature_names_out([coluna]))
        df_codificado = pd.concat([data_frame, df_colunas_transformadas], axis=1)
        df_codificado.drop([coluna], axis=1, inplace=True)
        data_frame = df_codificado

"""<h2> Modelo Completo"""

#Definir variáveis preditoras e alvo (sem 'charges')
var_preditoras = data_frame.drop(['charges'], axis=1)
var_alvo = data_frame['charges']

#Separar dados de treino e teste (80% treino, 20% teste)
x_train, x_test, y_train, y_test = train_test_split(var_preditoras, var_alvo, test_size=0.2, random_state=0)

#Treinamento do modelo
modelo_reg_multi = LinearRegression()
modelo_reg_multi.fit(x_train, y_train)

#Previsões
y_predicao = modelo_reg_multi.predict(x_test)

#Cálculo das métricas
mae = metrics.mean_absolute_error(y_test, y_predicao)
rmse = np.sqrt(metrics.mean_squared_error(y_test, y_predicao))
r2 = metrics.r2_score(y_test, y_predicao)

#R^2 ajustado
n = len(y_test)
k = x_test.shape[1]
r2_ajustado = 1 - (1 - r2) * (n - 1) / (n - k - 1)

#Exibir resultados
print(f"MAE: {mae}")
print(f"RMSE: {rmse}")
print(f"R^2: {r2}")
print(f"R^2 ajustado: {r2_ajustado}")

"""<h2> Análise de P-valores e Seleção de Variável para Remoção"""

#Adicionar uma constante para análise com statsmodels
var_preditoras_com_const = sm.add_constant(data_frame.drop(['charges'], axis=1))

#Estimação dos p-valores
modelo_ols = sm.OLS(data_frame['charges'], var_preditoras_com_const)
resultado_ols = modelo_ols.fit()

#Exibir resumo dos p-valores
print(resultado_ols.summary())

#Analisar o p-valor para remover a variável com menor significância (p-valor alto)

"""<h2> Modelo com a Variável Removida ('sex')"""

#Remover a variável de baixa significância (substituir 'sex' pela variável com p-valor alto)
var_preditoras_reduzido = data_frame.drop(['charges', 'sex'], axis=1)

#Separar dados de treino e teste novamente
x_train_reduzido, x_test_reduzido, y_train_reduzido, y_test_reduzido = train_test_split(var_preditoras_reduzido, var_alvo, test_size=0.2, random_state=0)

#Treinamento do modelo reduzido
modelo_reg_multi_reduzido = LinearRegression()
modelo_reg_multi_reduzido.fit(x_train_reduzido, y_train_reduzido)

#Previsões
y_predicao_reduzido = modelo_reg_multi_reduzido.predict(x_test_reduzido)

#Cálculo das métricas
mae_reduzido = metrics.mean_absolute_error(y_test_reduzido, y_predicao_reduzido)
rmse_reduzido = np.sqrt(metrics.mean_squared_error(y_test_reduzido, y_predicao_reduzido))
r2_reduzido = metrics.r2_score(y_test_reduzido, y_predicao_reduzido)

#R^2 ajustado do modelo reduzido
n_reduzido = len(y_test_reduzido)
k_reduzido = x_test_reduzido.shape[1]
r2_ajustado_reduzido = 1 - (1 - r2_reduzido) * (n_reduzido - 1) / (n_reduzido - k_reduzido - 1)

#Exibir resultados
print(f"MAE (reduzido): {mae_reduzido}")
print(f"RMSE (reduzido): {rmse_reduzido}")
print(f"R^2 (reduzido): {r2_reduzido}")
print(f"R^2 ajustado (reduzido): {r2_ajustado_reduzido}")

"""<h2> Análise Comparativa e Visualização"""

#Comparar resultados entre os dois modelos
print("Comparação de Métricas:")
print(f"MAE - Original: {mae}, Reduzido: {mae_reduzido}")
print(f"RMSE - Original: {rmse}, Reduzido: {rmse_reduzido}")
print(f"R^2 - Original: {r2}, Reduzido: {r2_reduzido}")
print(f"R^2 Ajustado - Original: {r2_ajustado}, Reduzido: {r2_ajustado_reduzido}")

#Gráficos de dispersão para o modelo original
plt.figure(figsize=(10, 5))
plt.scatter(y_predicao, y_test, color="blue", label="Original")
plt.scatter(y_predicao_reduzido, y_test_reduzido, color="red", label="Reduzido", alpha=0.7)
plt.xlabel("Valores Previstos")
plt.ylabel("Valores Reais")
plt.title("Gráfico de Dispersão: Valor Previsto vs Valor Real")
plt.legend()
plt.show()